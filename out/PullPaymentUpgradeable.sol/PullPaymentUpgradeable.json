{"abi":[{"type":"function","name":"payments","inputs":[{"name":"dest","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"withdrawPayments","inputs":[{"name":"payee","type":"address","internalType":"address payable"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"payments(address)":"e2982c21","withdrawPayments(address)":"31b3eb94"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.\",\"kind\":\"dev\",\"methods\":{\"payments(address)\":{\"details\":\"Returns the payments owed to an address.\",\"params\":{\"dest\":\"The creditor's address.\"}},\"withdrawPayments(address)\":{\"details\":\"Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.\",\"params\":{\"payee\":\"Whose payments will be withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/security/PullPaymentUpgradeable.sol\":\"PullPaymentUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[\":@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/\",\":ds-test/=lib/v4-periphery/lib/v4-core/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/v4-periphery/lib/v4-core/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/\",\":openzeppelin-contracts/=lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/\",\":permit2/=lib/v4-periphery/lib/permit2/\",\":solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/\",\":v4-core/=lib/v4-periphery/lib/v4-core/src/\",\":v4-periphery/=lib/v4-periphery/\"],\"viaIR\":true},\"sources\":{\"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4dd39ae44599da9e6b59035de3cddcfaa8d7b2a45f1c887adf5a1e38315cf6cd\",\"dweb:/ipfs/QmcFVkc7m3MzxoiCWCb2yZuezqW7eQTEvnScNALXhdsyJu\"]},\"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fe9fa1beb63e4a09637701f783982ba80380d630d600c9cafe26b68bf58be1b2\",\"dweb:/ipfs/QmRA3GXhTWys88joD9x8xYhdjzvGwmDGLMMzGw3LxbSEge\"]},\"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/security/PullPaymentUpgradeable.sol\":{\"keccak256\":\"0x90f8530b1b5226fa728fc70f06386345c5687e9695050c28220ca4d726da7713\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c46d5910bb49edc651cdd0717b303a3bdd5e7dcc4f74cd352b2d7b986fd5b6cf\",\"dweb:/ipfs/QmPjtAzZPQeDLbx2n3RTcccX5hdaqVUzmg24wyaRqkn9XS\"]},\"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x37c56d5e4a1c4c65ad0dcc6af28442c5d35c6ca07d9ad6e966e07dceb97e6c8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb2949782c621d81bbe0a7bdf82ff7196eff7016a67f734eb34c2b6620998b72\",\"dweb:/ipfs/QmWhYKgbu39Z664orfXNydr1EWpZCKpjxUdJs7Du6VHSTf\"]},\"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9cebeae5077fc0a0aa17afa7dc646904ac4d35b06694c756cf50321adf59edd0\",\"dweb:/ipfs/QmZn8QydMVAZAjPyUThKtu2sp3JeDmRyi68WGBZbAQVtkR\"]},\"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/utils/escrow/EscrowUpgradeable.sol\":{\"keccak256\":\"0xf42e5df12141275ae355df7b162167e89877a8e68bf26898135c981edaa4e6ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c427f3a3b72eec8b0f3d3f0efd9f9ee3b60e17043d5eaa35133c8241f7248ad4\",\"dweb:/ipfs/QmUkj9LLD88Gq8VE4Cq9HAXi3jhLr1npuo6zufsbXAaxnH\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"dest","type":"address"}],"stateMutability":"view","type":"function","name":"payments","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address payable","name":"payee","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"withdrawPayments"}],"devdoc":{"kind":"dev","methods":{"payments(address)":{"details":"Returns the payments owed to an address.","params":{"dest":"The creditor's address."}},"withdrawPayments(address)":{"details":"Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.","params":{"payee":"Whose payments will be withdrawn."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/","ds-test/=lib/v4-periphery/lib/v4-core/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-gas-snapshot/=lib/v4-periphery/lib/v4-core/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/","openzeppelin-contracts/=lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/","permit2/=lib/v4-periphery/lib/permit2/","solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/","v4-core/=lib/v4-periphery/lib/v4-core/src/","v4-periphery/=lib/v4-periphery/"],"optimizer":{"enabled":true,"runs":800},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/security/PullPaymentUpgradeable.sol":"PullPaymentUpgradeable"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/access/OwnableUpgradeable.sol":{"keccak256":"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa","urls":["bzz-raw://4dd39ae44599da9e6b59035de3cddcfaa8d7b2a45f1c887adf5a1e38315cf6cd","dweb:/ipfs/QmcFVkc7m3MzxoiCWCb2yZuezqW7eQTEvnScNALXhdsyJu"],"license":"MIT"},"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/proxy/utils/Initializable.sol":{"keccak256":"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9","urls":["bzz-raw://fe9fa1beb63e4a09637701f783982ba80380d630d600c9cafe26b68bf58be1b2","dweb:/ipfs/QmRA3GXhTWys88joD9x8xYhdjzvGwmDGLMMzGw3LxbSEge"],"license":"MIT"},"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/security/PullPaymentUpgradeable.sol":{"keccak256":"0x90f8530b1b5226fa728fc70f06386345c5687e9695050c28220ca4d726da7713","urls":["bzz-raw://c46d5910bb49edc651cdd0717b303a3bdd5e7dcc4f74cd352b2d7b986fd5b6cf","dweb:/ipfs/QmPjtAzZPQeDLbx2n3RTcccX5hdaqVUzmg24wyaRqkn9XS"],"license":"MIT"},"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/utils/AddressUpgradeable.sol":{"keccak256":"0x37c56d5e4a1c4c65ad0dcc6af28442c5d35c6ca07d9ad6e966e07dceb97e6c8d","urls":["bzz-raw://eb2949782c621d81bbe0a7bdf82ff7196eff7016a67f734eb34c2b6620998b72","dweb:/ipfs/QmWhYKgbu39Z664orfXNydr1EWpZCKpjxUdJs7Du6VHSTf"],"license":"MIT"},"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/utils/ContextUpgradeable.sol":{"keccak256":"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8","urls":["bzz-raw://9cebeae5077fc0a0aa17afa7dc646904ac4d35b06694c756cf50321adf59edd0","dweb:/ipfs/QmZn8QydMVAZAjPyUThKtu2sp3JeDmRyi68WGBZbAQVtkR"],"license":"MIT"},"src/libraries/openzeppelin-contracts-upgradeable-master/contracts/utils/escrow/EscrowUpgradeable.sol":{"keccak256":"0xf42e5df12141275ae355df7b162167e89877a8e68bf26898135c981edaa4e6ac","urls":["bzz-raw://c427f3a3b72eec8b0f3d3f0efd9f9ee3b60e17043d5eaa35133c8241f7248ad4","dweb:/ipfs/QmUkj9LLD88Gq8VE4Cq9HAXi3jhLr1npuo6zufsbXAaxnH"],"license":"MIT"}},"version":1},"id":393}